let title: string = "name";
const speakTitle = function (title: string) {};
/**
 * 什么是类型检查器
 * 检查代码是否符合类型安全要求的特殊程序
 * 简单一点说就是：检查类型是不是对的，
 * 比如一个函数接受字符串类型的参数，但是传给了一个数值类型的值给它。
 */
/**
 * 什么事类型安全
 * 借助类型避免程序做无效的事情，
 * 那什么是无效的事情，做的事情毫无意义，或者程序崩溃。
 * */
/**
 * 什么是类型系统
 * 类型检查器为程序分配类型时使用的一系列规则
 *
 * 一般来说 类型系统有两种：一种通过显示句法告诉编译器所有值的类型，
 * 另一种自动推导值的类型
 *
 * **/

/**
 * ts身兼两种类型系统，可以显示的注解类型，也可以让typescript自动推导类型
 * 为了显示告诉ts我们使用的是什么类型，我们要使用注解
 * 注解是形式是   value:type
 * 就好像你对别人说了这么一句话，嗨，小王，你看到这个value了吗，它的类型是type，
 * */
let a: number = 123;
let b: string = "jack";
let c: boolean[] = [true, false];

/**
 * 什么是注解
 * 我的理解是显示的告诉编译器 值的类型
 * */
/**
 * 其实javascript也有类型系统，
 * js是动态绑定类型，因此非必须运行时才知道类型，在运行程序之，js对类型一无所知
 *
 * ts会对代码进行静态分析，找出这类错误，在运行之前反馈给你
 * ts能做的是把js代码中运行时错误提前编译时报告。
 */

/**
 * @types/node 这个包是干嘛用的
 *
 * */

/**
 * ts-node 可以直接编译和运行ts代码
 * */

/**
 * typescript-node-starter typescript 脚手架可以直接生成文件夹结构
 * */

/**
 * 说了那么多，到底什么  "类型"  ?????
 * 书上说的是，某一种类型的值以及对这种类型的值可以执行的操作。
 *
 * */

export default a;
